from .base_generator import *
from .doxygen import *
from .go_generator import *
from .java_generator import *
from .log_formatter import *

import argparse
import colorama
import functools
import logging
import os
import subprocess
import sys


_LOG = logging.getLogger(__name__)

_DEFAULT_DOXYGEN_DIR = "build/docs/public_api/xml"
_ROC_TOOLKIT_BASE_PATH = "../roc-toolkit"
_ROC_JAVA_BASE_PATH = "../roc-java"
_ROC_GO_BASE_PATH = "../roc-go"


@functools.cache
def _generate_comment(toolkit_dir):
    git_tag = subprocess.check_output(
        ['git', 'describe', '--tags'], cwd=toolkit_dir).decode('ascii').strip()

    git_commit = subprocess.check_output(
        ['git', 'rev-parse', '--short', 'HEAD'], cwd=toolkit_dir).decode('ascii').strip()

    _LOG.info(f"Detected git tag {git_tag}, commit {git_commit}")

    return [f"Code generated by bindgen.py from roc-streaming/bindgen",
            f"roc-toolkit git tag: {git_tag}, commit: {git_commit}"]


def _generate_lang(generator_construct, toolkit_dir, output_dir,
                   name_prefixes,
                   enum_definitions: list[EnumDefinition],
                   struct_definitions: list[StructDefinition],
                   class_definitions: list[ClassDefinition]):
    if not os.path.isdir(output_dir):
        print(f"Directory does not exist: {output_dir}. " +
              "Can't generate bindings {generator_construct.__name__}",
              file=sys.stderr)
        exit(1)

    autogen_comment = _generate_comment(toolkit_dir)

    _LOG.info(f"Running {generator_construct.__name__} for {output_dir}")

    generator = generator_construct(output_dir, name_prefixes)

    for enum_definition in enum_definitions:
        generator.generate_enum(enum_definition, autogen_comment)
    for struct_definition in struct_definitions:
        generator.generate_struct(struct_definition, autogen_comment)
    for class_definition in class_definitions:
        generator.generate_class(class_definition, autogen_comment)


def _generate_all(args):
    enum_definitions = traverse_enums(args.doxygen_dir)
    struct_definitions = traverse_structs(args.doxygen_dir)
    class_definitions = traverse_classes(args.doxygen_dir)
    name_prefixes = traverse_name_prefixes(enum_definitions, struct_definitions)

    if args.type in ['all', 'java']:
        _generate_lang(JavaGenerator, args.toolkit_dir, args.java_output_dir,
                       name_prefixes, enum_definitions, struct_definitions, class_definitions)

    if args.type in ['all', 'go']:
        _generate_lang(GoGenerator, args.toolkit_dir, args.go_output_dir,
                       name_prefixes, enum_definitions, struct_definitions, class_definitions)


def main():
    os.chdir(
        os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

    parser = argparse.ArgumentParser(description='Generate bindings')

    parser.add_argument('-t', '--type', choices=['all', 'java', 'go'],
                        help='Type of enum generation', required=True)
    parser.add_argument('--toolkit_dir',
                        default=_ROC_TOOLKIT_BASE_PATH,
                        help=f"Roc Toolkit directory (default: {_ROC_TOOLKIT_BASE_PATH})")
    parser.add_argument('--doxygen_dir',
                        default=None,
                        help=f"Doxygen XML directory (default: <toolkit_dir>/{_DEFAULT_DOXYGEN_DIR})")
    parser.add_argument('--go_output_dir',
                        default=_ROC_GO_BASE_PATH,
                        help=f"Go output directory (default: {_ROC_GO_BASE_PATH})")
    parser.add_argument('--java_output_dir',
                        default=_ROC_JAVA_BASE_PATH,
                        help=f"Java output directory (default: {_ROC_JAVA_BASE_PATH})")

    args = parser.parse_args()

    colorama.init()

    logHandler = logging.StreamHandler(sys.stderr)
    logHandler.setFormatter(LogFormatter())
    logging.basicConfig(level=logging.DEBUG, handlers=[logHandler])

    if not args.doxygen_dir:
        args.doxygen_dir = os.path.join(args.toolkit_dir, _DEFAULT_DOXYGEN_DIR)

    _generate_all(args)
